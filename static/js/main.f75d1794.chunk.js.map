{"version":3,"sources":["components/Header.js","components/Generations.js","components/Cell.js","constants/constants.js","components/Grid.js","components/Controls.js","components/Game.js","actions/action-creators.js","constants/action-types.js","components/Rules.js","components/Footer.js","components/App.js","reducers/cellData.utils.js","reducers/cellData.js","reducers/generation.js","reducers/index.js","store.js","index.js"],"names":["Header","react_default","a","createElement","Generations","_ref","generation","className","Cell","toggle","_this","props","index","concat","this","alive","style","height","width","onClick","Component","Grid","makeGrid","cells","cellData","map","c","i","Cell_Cell","key","library","add","faPause","faPlay","faRandom","faStepForward","faTimes","Controls","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","clear","state","selected","cancelAnimationFrame","requestID","setState","pause","play","nextGen","requestAnimationFrame","random","step","react_fontawesome_index_es","icon","connect","dispatch","type","ac","Fragment","components_Generations","Grid_Grid","Controls_Controls","Rules","href","rel","target","Footer","App","components_Header","components_Rules","components_Game","components_Footer","clearCells","arguments","length","undefined","Array","fill","neighborsAlive","idx","arr","_coordinatesCalc","Error","Math","floor","coordinatesCalc","_coordinatesCalc2","slicedToArray","x","y","count","forEach","direction","xC","yC","apply","toConsumableArray","calculateNext","action","u","clone","combineReducers","store","createStore","reducer","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f75d1794.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header>\n    <h1>John Conway's Game of Life</h1>\n    <h3>a zero player automaton</h3>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Generations = ({ generation }) => (\n  <div className=\"generations\">\n    <h1>\n      Generation: <span className=\"num\">{generation}</span>\n    </h1>\n  </div>\n);\n\nexport default Generations;\n\nGenerations.propTypes = {\n  generation: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as c from '../constants/constants';\n\nexport default class Cell extends Component {\n  toggle = () => {\n    this.props.toggle(this.props.index);\n  };\n  render() {\n    return (\n      <div\n        className={`cell ${this.props.alive ? 'alive' : 'dead'}`}\n        style={{\n          height: c.cellSide,\n          width: c.cellSide,\n        }}\n        onClick={this.toggle}\n      />\n    );\n  }\n}\n\nCell.propTypes = {\n  alive: PropTypes.bool.isRequired,\n  index: PropTypes.number.isRequired,\n  toggle: PropTypes.func.isRequired,\n};\n","// Constants\nexport const cellSide = 20; // Cell height and width in pixels\nexport const gridHeight = 20;\nexport const gridWidth = 30;\nexport const probability = 0.8; // Default probability a cell is alive on randomize\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './Cell';\nimport * as c from '../constants/constants';\n\nexport default class Grid extends Component {\n  componentDidMount() {\n    this.props.makeGrid();\n  }\n  render() {\n    const cells = this.props.cellData.map((c, i) => (\n      <Cell key={i} alive={c} toggle={this.props.toggle} index={i} />\n    ));\n    return (\n      <div\n        className=\"grid\"\n        style={{\n          width: c.cellSide * c.gridWidth,\n        }}\n      >\n        {cells}\n      </div>\n    );\n  }\n}\n\nGrid.propTypes = {\n  cellData: PropTypes.arrayOf(PropTypes.bool).isRequired,\n  makeGrid: PropTypes.func.isRequired,\n  toggle: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Font Awesome\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faPause,\n  faPlay,\n  faRandom,\n  faStepForward,\n  faTimes,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faPause, faPlay, faRandom, faStepForward, faTimes);\n\n// Controls\nexport default class Controls extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { selected: null };\n  }\n\n  clear = () => {\n    if (this.state.selected !== 'clear') {\n      cancelAnimationFrame(this.requestID);\n      this.props.clear();\n      this.setState({ selected: 'clear' });\n    }\n  };\n\n  pause = () => {\n    if (\n      this.state.selected !== 'clear' &&\n      this.state.selected !== 'pause' &&\n      this.state.selected !== 'random'\n    ) {\n      cancelAnimationFrame(this.requestID);\n      this.setState({ selected: 'pause' });\n    }\n  };\n\n  play = () => {\n    this.props.nextGen();\n    this.requestID = requestAnimationFrame(this.play);\n    this.setState({ selected: 'play' });\n  };\n\n  random = () => {\n    cancelAnimationFrame(this.requestID);\n    this.props.makeGrid();\n    this.setState({ selected: 'random' });\n  };\n\n  step = () => {\n    if (this.state.selected !== 'play') {\n      this.props.nextGen();\n    }\n  };\n\n  componentDidMount() {\n    this.play();\n  }\n\n  render() {\n    const { selected } = this.state;\n    return (\n      <div className=\"controls\">\n        {/* STEP */}\n        <button className={`step ${selected === 'play' ? 'disabled' : ''}`} onClick={this.step}>\n          <FontAwesomeIcon icon=\"step-forward\" />\n          &nbsp;Step\n        </button>\n\n        {/* PLAY */}\n        <button\n          className={`play ${selected === 'play' ? 'selected disabled' : ''}`}\n          onClick={selected !== 'play' ? this.play : null}\n        >\n          <FontAwesomeIcon icon=\"play\" />\n          &nbsp;Play\n        </button>\n\n        {/* PAUSE */}\n        <button\n          className={`pause ${selected === 'pause' ? 'selected disabled' : ''} ${\n            selected !== 'play' ? 'disabled' : ''\n          }`}\n          onClick={this.pause}\n        >\n          <FontAwesomeIcon icon=\"pause\" />\n          &nbsp;Pause\n        </button>\n\n        {/* CLEAR */}\n        <button\n          className={`clear ${selected === 'clear' ? 'selected disabled' : ''}`}\n          onClick={this.clear}\n        >\n          <FontAwesomeIcon icon=\"times\" />\n          &nbsp;Clear\n        </button>\n\n        {/* RANDOM */}\n        <button\n          className={`random ${selected === 'random' ? 'selected' : ''}`}\n          onClick={this.random}\n        >\n          <FontAwesomeIcon icon=\"random\" />\n          &nbsp;Random\n        </button>\n      </div>\n    );\n  }\n}\n\nControls.propTypes = {\n  clear: PropTypes.func.isRequired,\n  makeGrid: PropTypes.func.isRequired,\n  nextGen: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as ac from '../actions/action-creators';\nimport Generations from './Generations';\nimport Grid from './Grid';\nimport Controls from './Controls';\n\nconst Game = props => (\n  <>\n    <div className=\"game\">\n      <Generations generation={props.generation} />\n      <Grid cellData={props.cellData} makeGrid={props.makeGrid} toggle={props.toggle} />\n      <Controls clear={props.clear} makeGrid={props.makeGrid} nextGen={props.nextGen} />\n    </div>\n    <p className=\"backup\">\n      For an optimal experience, please view this application on a wider screen.\n    </p>\n  </>\n);\n\nconst mapStateToProps = state => ({\n  generation: state.generation,\n  cellData: state.cellData,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  clear: () => dispatch(ac.clear()),\n  makeGrid: () => dispatch(ac.makeGrid()),\n  nextGen: () => dispatch(ac.nextGen()),\n  toggle: index => dispatch(ac.toggle(index)),\n});\n\nGame.propTypes = {\n  cellData: PropTypes.arrayOf(PropTypes.bool).isRequired,\n  clear: PropTypes.func.isRequired,\n  generation: PropTypes.number.isRequired,\n  makeGrid: PropTypes.func.isRequired,\n  nextGen: PropTypes.func.isRequired,\n  toggle: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);\n","import * as a from '../constants/action-types';\n\n// Action Creators\nexport const clear = () => ({ type: a.CLEAR });\nexport const makeGrid = () => ({ type: a.MAKE_GRID });\nexport const nextGen = () => ({ type: a.NEXT_GEN });\nexport const toggle = index => ({ index, type: a.TOGGLE });\n","// Action Types\nexport const CLEAR = 'CLEAR';\nexport const MAKE_GRID = 'MAKE_GRID';\nexport const NEXT_GEN = 'NEXT_GEN';\nexport const TOGGLE = 'TOGGLE';\n","import React from 'react';\n\nconst Rules = () => (\n  <div className=\"rules\">\n    <h2>Rules</h2>\n    <ol>\n      <li>\n        Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.\n      </li>\n      <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n      <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n      <li>\n        Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n      </li>\n    </ol>\n    <p>\n      Learn more{' '}\n      <a\n        href=\"https://en.wikipedia.org/wiki/Conway's_Game_of_Life\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        here\n      </a>\n      .\n    </p>\n  </div>\n);\n\nexport default Rules;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer>\n    <p>\n      <a\n        href=\"https://github.com/CharmedSatyr/game_of_life\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        Source code\n      </a>{' '}\n      available under the{' '}\n      <a\n        href=\"https://github.com/CharmedSatyr/game_of_life/blob/master/LICENSE\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        GNU Public License v3.0\n      </a>\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport Header from './Header';\nimport Game from './Game';\nimport Rules from './Rules';\nimport Footer from './Footer';\n\nconst App = () => (\n  <div className=\"app\">\n    <Header />\n    <main>\n      <Rules />\n      <Game />\n    </main>\n    <Footer />\n  </div>\n);\n\nexport default App;\n","import * as c from '../constants/constants';\n\n/*** MAKE GRID ***/\n// Create a default array of `false` Booleans\nexport const clearCells = (height = c.gridHeight, width = c.gridWidth) =>\n  Array(height * width).fill(false);\n\n// Replace some of the `false` Booleans with `true`\n// A 'living' cell is `true`; a 'dead' cell is `false`\nexport const populateCells = arr => arr.map(() => Math.random() > c.probability);\n\n/*** NEXT GENERATION ***/\n// Calculate x and y coordinates of cells based on index\nexport const coordinatesCalc = index => {\n  if (typeof index !== 'number') {\n    throw new Error('coordinatesCalc: Argument must be a number');\n  }\n\n  const x = index % c.gridWidth;\n  const y = Math.floor(index / c.gridWidth);\n  return [x, y];\n};\n\n// isAlive returns a Boolean\nexport const isAlive = (x, y, arr) => {\n  // Default values for neighbors' x and y coordinates\n  let xC = x,\n    yC = y;\n\n  // Make grid toroidal (fix nonexistent cell coordinates)\n  // Horizontal wrapping\n  if (x === -1) {\n    xC = c.gridWidth - 1;\n  }\n  if (x === c.gridWidth) {\n    xC = 0;\n  }\n\n  // Vertical wrapping\n  if (y === -1) {\n    yC = c.gridHeight - 1;\n  }\n  if (y === c.gridHeight) {\n    yC = 0;\n  }\n\n  // Avoid a loop by inferring index\n  const index = xC + yC * c.gridWidth;\n  return arr[index]; // Boolean\n};\n\n// Count how many of a given cell's neighbors are alive\nexport const neighborsAlive = (idx, arr) => {\n  // Convert the cells index to x/y coordinate value\n  const [x, y] = coordinatesCalc(idx);\n\n  // Coordinates of adjacent cells\n  const directions = [\n    [x - 1, y - 1], // NW\n    [x, y - 1], // N\n    [x + 1, y - 1], // NE\n    [x - 1, y], // W\n    [x + 1, y], // E\n    [x - 1, y + 1], // SW\n    [x, y + 1], // S\n    [x + 1, y + 1], // SE\n  ];\n\n  // Count living, adjacent cells\n  let count = 0;\n  directions.forEach(direction => {\n    if (isAlive(...direction, arr)) {\n      count++;\n    }\n  });\n\n  // Return the total\n  return count;\n};\n\n// Calculate whether cell will be `alive` next generation\nexport const calculateNext = (idx, arr) => {\n  const alive = arr[idx];\n  const count = neighborsAlive(idx, arr);\n\n  // John Conway's Rules\n  if (alive && count < 2) {\n    return false;\n  }\n  if (alive && count > 3) {\n    return false;\n  }\n  if (alive && (count === 2 || count === 3)) {\n    return true;\n  }\n  if (!alive && count === 3) {\n    return true;\n  }\n  // Fallback\n  return alive;\n};\n\n// Advance cells in the array by one generation based on neighbors' `alive` values\nexport const nextGen = arr => arr.map((c, i) => calculateNext(i, arr));\n","import * as at from '../constants/action-types';\nimport * as u from './cellData.utils';\n\nconst cellData = (state = [], action) => {\n  switch (action.type) {\n    case at.CLEAR:\n      return u.clearCells();\n    case at.MAKE_GRID:\n      return u.populateCells(u.clearCells());\n    case at.NEXT_GEN:\n      return u.nextGen(state);\n    case at.TOGGLE:\n      const clone = [...state];\n      clone[action.index] = !state[action.index];\n      return clone;\n    default:\n      return state;\n  }\n};\n\nexport default cellData;\n","import * as at from '../constants/action-types';\n\nconst generation = (state = 0, action) => {\n  switch (action.type) {\n    case at.CLEAR:\n      return 0;\n    case at.MAKE_GRID:\n      return 0;\n    case at.NEXT_GEN:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nexport default generation;\n","import { combineReducers } from 'redux';\n\nimport cellData from './cellData';\nimport generation from './generation';\n\nexport default combineReducers({\n  cellData,\n  generation,\n});\n","// Store\nimport { createStore } from 'redux';\nimport reducer from './reducers/index';\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}